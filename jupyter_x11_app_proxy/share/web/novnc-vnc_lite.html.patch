--- vnc_lite.html	2023-06-01 16:27:35.934981762 +0200
+++ vnc_lite_patched.html	2023-06-01 16:30:53.453383108 +0200
@@ -3,6 +3,8 @@
 <head>
 
     <!--
+    Modified from novnc_lite.html example in noVNC 1.2.0
+
     noVNC example: lightweight example using minimal UI and features
 
     This is a self-contained file which doesn't import WebUtil or external CSS.
@@ -29,25 +31,6 @@
             height: 100%;
         }
 
-        #top_bar {
-            background-color: #6e84a3;
-            color: white;
-            font: bold 12px Helvetica;
-            padding: 6px 5px 4px 5px;
-            border-bottom: 1px outset;
-        }
-        #status {
-            text-align: center;
-        }
-        #sendCtrlAltDelButton {
-            position: fixed;
-            top: 0px;
-            right: 0px;
-            border: 1px outset;
-            padding: 5px 5px 4px 5px;
-            cursor: pointer;
-        }
-
         #screen {
             flex: 1; /* fill remaining space */
             overflow: hidden;
@@ -62,47 +45,6 @@
         let rfb;
         let desktopName;
 
-        // When this function is called we have
-        // successfully connected to a server
-        function connectedToServer(e) {
-            status("Connected to " + desktopName);
-        }
-
-        // This function is called when we are disconnected
-        function disconnectedFromServer(e) {
-            if (e.detail.clean) {
-                status("Disconnected");
-            } else {
-                status("Something went wrong, connection is closed");
-            }
-        }
-
-        // When this function is called, the server requires
-        // credentials to authenticate
-        function credentialsAreRequired(e) {
-            const password = prompt("Password Required:");
-            rfb.sendCredentials({ password: password });
-        }
-
-        // When this function is called we have received
-        // a desktop name from the server
-        function updateDesktopName(e) {
-            desktopName = e.detail.name;
-        }
-
-        // Since most operating systems will catch Ctrl+Alt+Del
-        // before they get a chance to be intercepted by the browser,
-        // we provide a way to emulate this key sequence.
-        function sendCtrlAltDel() {
-            rfb.sendCtrlAltDel();
-            return false;
-        }
-
-        // Show a status text in the top bar
-        function status(text) {
-            document.getElementById('status').textContent = text;
-        }
-
         // This function extracts the value of one variable from the
         // query string. If the variable isn't defined in the URL
         // it returns the default value instead.
@@ -130,22 +72,18 @@
             return defaultValue;
         }
 
-        document.getElementById('sendCtrlAltDelButton')
-            .onclick = sendCtrlAltDel;
-
         // Read parameters specified in the URL query string
         // By default, use the host and port of server that served this file
         const host = readQueryVariable('host', window.location.hostname);
         let port = readQueryVariable('port', window.location.port);
         const password = readQueryVariable('password');
-        const path = readQueryVariable('path', 'websockify');
+
+        const path = readQueryVariable('path', window.location.pathname.replace(/[^/]*$/, '').substring(1) + 'websockify');
 
         // | | |         | | |
         // | | | Connect | | |
         // v v v         v v v
 
-        status("Connecting");
-
         // Build the websocket URL used to connect
         let url;
         if (window.location.protocol === "https:") {
@@ -162,24 +100,14 @@
         // Creating a new RFB object will start a new connection
         rfb = new RFB(document.getElementById('screen'), url,
                       { credentials: { password: password } });
+        rfb.resizeSession = true;
+        rfb.scaleViewport = true;
+
 
-        // Add listeners to important events from the RFB module
-        rfb.addEventListener("connect",  connectedToServer);
-        rfb.addEventListener("disconnect", disconnectedFromServer);
-        rfb.addEventListener("credentialsrequired", credentialsAreRequired);
-        rfb.addEventListener("desktopname", updateDesktopName);
-
-        // Set parameters that can be changed on an active connection
-        rfb.viewOnly = readQueryVariable('view_only', false);
-        rfb.scaleViewport = readQueryVariable('scale', false);
     </script>
 </head>
 
 <body>
-    <div id="top_bar">
-        <div id="status">Loading</div>
-        <div id="sendCtrlAltDelButton">Send CtrlAltDel</div>
-    </div>
     <div id="screen">
         <!-- This is where the remote screen will appear -->
     </div>
